{
  "version": 3,
  "sources": ["../src/pristine.js", "../src/lang.js", "../src/utils.js"],
  "sourcesContent": ["import { lang } from './lang';\nimport { tmpl, findAncestor, groupedElemCount, mergeConfig, parseBool } from './utils';\n\n/** @typedef {import(\"async-pristinejs\").PristineConfig} PristineConfig */\n/** @typedef {import(\"async-pristinejs\").Validator} Validator */\n/** @typedef {import(\"async-pristinejs\").Field} Field */\n\n/** @type {PristineConfig}*/\nlet defaultConfig = {\n  classTo: 'form-group',\n  errorClass: 'has-danger',\n  successClass: 'has-success',\n  errorTextParent: 'form-group',\n  errorTextTag: 'div',\n  errorTextClass: 'text-help',\n  disableSubmitUntilValid: true,\n  validateDefaultValues: true,\n  validationStrategy: 'off'\n};\n\nconst PRISTINE_ERROR = 'pristine-error';\nconst SELECTOR = 'input:not([type^=hidden]):not([type^=submit]), select, textarea';\nconst ALLOWED_ATTRIBUTES = new Set(['required', 'min', 'max', 'minlength', 'maxlength', 'pattern']);\nconst EMAIL_REGEX = /^(([^<>()\\[\\]\\\\.,;:\\s@']+(\\.[^<>()\\[\\]\\\\.,;:\\s@']+)*)|('.+'))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n\nconst MESSAGE_REGEX = /-message(?:-([a-z]{2}(?:_[A-Z]{2})?))?/; // matches, -message, -message-en, -message-en_US\nlet currentLocale = 'en';\nconst validators = {};\n\nconst _ = function(name, validator) {\n  validator.name = name;\n  if (validator.priority === undefined)\n    validator.priority = 1;\n  validators[name] = validator;\n};\n\n/** @type {Validator} */\n_('text', { fn: () => true, priority: 0 });\n/** @type {Validator]} */\n_('required', {\n  fn: function(val) {\n    if (this.type === 'radio' || this.type === 'checkbox') {\n      return groupedElemCount(this);\n    }\n\n    if (this.type === 'file') {\n      return this.files && this.files.length > 0;\n    }\n\n    return val !== undefined && val.trim() !== '';\n  },\n  priority: 99,\n  halt: true\n});\n\n/** @type {Validator} */\n_('email', { fn: (val) => !val || EMAIL_REGEX.test(val) });\n/** @type {Validator} */\n_('number', { fn: (val) => !val || !isNaN(parseFloat(val)), priority: 2 });\n/** @type {Validator} */\n_('integer', { fn: (val) => !val || /^\\d+$/.test(val) });\n/** @type {Validator} */\n_('minlength', { fn: (val, length) => !val || val.length >= parseInt(length) });\n/** @type {Validator} */\n_('maxlength', { fn: (val, length) => !val || val.length <= parseInt(length) });\n/** @type {Validator} */\n_('min', { fn: function(val, limit) { return !val || (this.type === 'checkbox' ? groupedElemCount(this) >= parseInt(limit) : parseFloat(val) >= parseFloat(limit)); } });\n/** @type {Validator} */\n_('max', { fn: function(val, limit) { return !val || (this.type === 'checkbox' ? groupedElemCount(this) <= parseInt(limit) : parseFloat(val) <= parseFloat(limit)); } });\n/** @type {Validator} */\n_('pattern', { fn: (val, pattern) => { let m = pattern.match(new RegExp('^/(.*?)/([gimy]*)$')); return !val || (new RegExp(m[1], m[2])).test(val); } });\n/** @type {Validator} */\n_('equals', { fn: (val, otherFieldSelector) => { let other = document.querySelector(otherFieldSelector); return (other) && ((!val && !other.value) || (other.value === val)); } });\n/** @type {Validator} */\n_('filesize', {\n  fn: function(_, size) {\n    if (!this.files || this.files.length === 0) return true; // not required\n    return Array.from(this.files).every(file =>\n      file.size <= parseInt(size)\n    );\n  }\n});\n/** @type {Validator} */\n_('filesizetotal', {\n  fn: function(_, size) {\n    if (!this.files || this.files.length === 0) return true; // not required\n    return Array.from(this.files).reduce((sum, file) => sum + file.size, 0) <= parseInt(size);\n  }\n});\n/** @type {Validator} */\n_('filetype', {\n  fn: function(_, types) {\n    if (!this.files || this.files.length === 0) return true; // not required\n    const allowed = types.split(',').map(t => t.trim().toLowerCase());\n    return Array.from(this.files).every(file =>\n      allowed.includes(file.type.toLowerCase())\n    );\n  }\n});\n\n/**\n * @class Pristine\n */\nexport default class Pristine {\n  /**\n   * @param {HTMLFormElement} form\n   * @param {PristineConfig} [config]\n   */\n  constructor(form, config) {\n    let self = this;\n\n    init(form, config);\n\n    /**\n     * @param {HTMLFormElement} form\n     * @param {PristineConfig} [config]\n     */\n    async function init(form, config) {\n      form.setAttribute('novalidate', 'true');\n\n      /** @type {boolean} */\n      self.destroyed = false\n\n      /** @type {HTMLFormElement} */\n      self.form = form;\n\n      /** @type {PristineConfig} */\n      self.config = mergeConfig(config || {}, defaultConfig);\n\n      /** @type {Field[]} */\n      self.fields = Array.from(form.querySelectorAll(SELECTOR)).map(\n        /** @param {HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement} input */\n        function(input) {\n          /** @type {Field['validators']} */\n          const fns = [];\n          /** @type {Field['params']} */\n          const params = {};\n          /** @type {Field['messages']} */\n          const messages = {};\n          /** @type {Set<string>} */\n          const overlappingAttributes = new Set();\n          /** @type {boolean} */\n          let touched = false;\n\n          // Check for overlapping attributes and prefer the pristine\n          [].forEach.call(input.attributes, function(attr) {\n            if (/^data-pristine-/.test(attr.name)) {\n              let name = attr.name.substr(14);\n              if (ALLOWED_ATTRIBUTES.has(name)) {\n                overlappingAttributes.add(name);\n              } else if (name === 'type') {\n                overlappingAttributes.add(attr.value);\n              }\n            }\n          });\n\n\n          [].forEach.call(input.attributes, function(attr) {\n            if (/^data-pristine-/.test(attr.name)) {\n              let name = attr.name.substr(14);\n              let messageMatch = name.match(MESSAGE_REGEX);\n              if (messageMatch !== null) {\n                let locale = messageMatch[1] === undefined ? 'en' : messageMatch[1];\n                if (!messages.hasOwnProperty(locale))\n                  messages[locale] = {};\n                let validatorName = name.replace(MESSAGE_REGEX, '');\n                messages[locale][validatorName] = attr.value;\n                return;\n              }\n              if (name === 'type') name = attr.value;\n              _addValidatorToField(fns, params, name, attr.value);\n            } else if (ALLOWED_ATTRIBUTES.has(attr.name) && !overlappingAttributes.has(attr.name)) {\n              _addValidatorToField(fns, params, attr.name, attr.value);\n            } else if (attr.name === 'type' && !overlappingAttributes.has(attr.value)) {\n              _addValidatorToField(fns, params, attr.value);\n            }\n          });\n\n\n          fns.sort((a, b) => b.priority - a.priority);\n\n          if (self.config.validationStrategy === 'live') {\n            _addEventListener(input, (!~['radio', 'checkbox', 'select'].indexOf(input.getAttribute('type')) ? 'input' : 'change'), async function(e) {\n              await self.validate(e.target);\n            }.bind(self));\n          } else if (self.config.validationStrategy === 'blur') {\n            _addEventListener(input, (!~['radio', 'checkbox', 'select'].indexOf(input.getAttribute('type')) ? 'blur' : 'change'), async function(e) {\n              await self.validate(e.target);\n            }.bind(self));\n          } else if (self.config.validationStrategy === 'hybrid') {\n            _addEventListener(input, (!~['radio', 'checkbox', 'select'].indexOf(input.getAttribute('type')) ? 'blur' : 'change'), async function(e) {\n              touched = true;\n              await self.validate(e.target);\n            }.bind(self), { once: true });\n            _addEventListener(input, (!~['radio', 'checkbox', 'select'].indexOf(input.getAttribute('type')) ? 'input' : 'change'), async function(e) {\n              if (touched) {\n                await self.validate(e.target);\n              }\n            }.bind(self));\n          }\n\n          // Check if the value is different than the default value\n          if (self.config.validateDefaultValues) {\n            queueMicrotask(async function() {\n              const isChanged = (\n                (input.type === 'checkbox' || input.type === 'radio')\n                  ? input.checked !== input.defaultChecked\n                  : input.value !== input.defaultValue\n              );\n\n              const isEmpty = input.value.trim() === '';\n              const isRequired = input.hasAttribute('required') || input.hasAttribute('data-pristine-required') !== null;\n\n              // Only show errors if value changed from default or required + not empty\n              if (isChanged || (isRequired && !isEmpty)) {\n                touched = true\n                await self.validate(input);\n              }\n            });\n          }\n\n          /** @type {Validator} */\n          const pristine = { input, validators: fns, params, messages, touched, self };\n          return input.pristine = pristine;\n        }.bind(self));\n\n      self.submit = self.form.querySelector('button[type=submit], input[type=submit]');\n      if (self.config.disableSubmitUntilValid) {\n        self.debounceTimeout = null\n        function debouncedUpdate() {\n          clearTimeout(self.debounceTimeout)\n          self.debounceTimeout = setTimeout(disableSubmit.bind(self), 50)\n        }\n\n        _addEventListener(self.form, 'input', debouncedUpdate.bind(self));\n        _addEventListener(self.form, 'change', debouncedUpdate.bind(self));\n        queueMicrotask(disableSubmit);\n      }\n      _addEventListener(self.form, 'reset', _reset.bind(self));\n    }\n\n    async function disableSubmit() {\n      if (!self.submit) return;\n\n      const invalid = !(await self.validate(true));\n\n      let changed = false;\n      if (self.config.validateDefaultValues) {\n        for (let field of self.fields) {\n          const input = field.input;\n\n          changed =\n            (input.type === 'checkbox' || input.type === 'radio')\n              ? input.checked !== input.checked\n              : input.value !== input.defaultValue;\n\n          if (changed) {\n            break;\n          }\n        }\n      }\n\n      self.submit.disabled = invalid || (self.config.validateDefaultValues && !changed);\n    };\n\n    /**\n     * @param {Validator[]} fns\n     * @param {Record<string, any[]>} params\n     * @param {string} name\n     * @param {any} value\n     */\n    function _addValidatorToField(fns, params, name, value) {\n      let validator = validators[name];\n      if (validator) {\n        fns.push(validator);\n        if (value) {\n          let valueParams = (name === 'pattern' ? [value] : value.split(','));\n          valueParams.unshift(null); // placeholder for input's value\n          params[name] = valueParams;\n        }\n      }\n    }\n\n    /**\n     * Validate a single input or the entire form.\n     * @param {HTMLElement | boolean | null} [input] => input element(s) or a jquery selector, null for full form validation\n     * @param {boolean} [silent] => do not show error messages, just return true/false\n     * @returns {Promise<boolean>} return true when valid false otherwise\n     */\n    self.validate = async function(input, silent) {\n      silent = (input && silent === true) || input === true;\n      let fields = self.fields;\n      if (input !== true && input !== false) {\n        if (input instanceof HTMLElement) {\n          fields = [input.pristine];\n        } else if (input instanceof NodeList || input instanceof (window.$ || Array) || input instanceof Array) {\n          fields = Array.from(input).map(el => el.pristine);\n        }\n      }\n\n      let valid = true;\n\n      for (let i = 0; fields[i]; i++) {\n        let field = fields[i];\n        if (await _validateField(field)) {\n          !silent && _showSuccess(field);\n        } else {\n          valid = false;\n          !silent && _showError(field);\n        }\n      }\n      return valid;\n    };\n\n    /**\n     * Get validation errors\n     * @param {HTMLElement} [input]\n     * @returns {Array<string> | Array<{ input: HTMLElement, errors: string[] }>}\n     */\n    self.getErrors = function(input) {\n      if (!input) {\n        let erroneousFields = [];\n        for (let i = 0; i < self.fields.length; i++) {\n          let field = self.fields[i];\n          if (field.errors.length) {\n            erroneousFields.push({ input: field.input, errors: field.errors });\n          }\n        }\n        return erroneousFields;\n      }\n      if (input.tagName && input.tagName.toLowerCase() === 'select') {\n        return input.pristine.errors;\n      }\n      return input.length ? input[0].pristine.errors : input.pristine.errors;\n    };\n\n    /**\n     * Validates a single field, all validator functions are called and error messages are generated\n     * when a validator fails\n     * @param  {Field} field\n     * @returns {Promise<boolean>}\n     * @private\n     */\n    async function _validateField(field) {\n      let errors = [];\n      let valid = true;\n      let values = [];\n      if (field.input.hasAttribute('multiple')) {\n        if (field.input.type = 'select') {\n          values.push(Array.from(selectElem.selectedOptions).map(opt => opt.value));\n        } else {\n          values.push(field.input.split(\",\"))\n        }\n      } else {\n        values.push(field.input.value)\n      }\n      for (let i = 0; i < values.length; i++) {\n        let value = values[i]\n        for (let j = 0; field.validators[j]; j++) {\n          let validator = field.validators[j];\n\n          let params = field.params[validator.name] ? field.params[validator.name] : [];\n          params[0] = value;\n          const isAsync = validator.fn.constructor.name === 'AsyncFunction';\n          if (isAsync ? !(await validator.fn.apply(field.input, params)) : !validator.fn.apply(field.input, params)) {\n            valid = false;\n\n            if (typeof validator.msg === 'function') {\n              errors.push(validator.msg(value, params));\n            } else if (typeof validator.msg === 'string') {\n              errors.push(tmpl.apply(validator.msg, params));\n            } else if (validator.msg === Object(validator.msg) && validator.msg[currentLocale]) { // typeof generates unnecessary babel code\n              errors.push(tmpl.apply(validator.msg[currentLocale], params));\n            } else if (field.messages[currentLocale] && field.messages[currentLocale][validator.name]) {\n              errors.push(tmpl.apply(field.messages[currentLocale][validator.name], params));\n            } else if (lang[currentLocale] && lang[currentLocale][validator.name]) {\n              errors.push(tmpl.apply(lang[currentLocale][validator.name], params));\n            } else {\n              errors.push(tmpl.apply(lang[currentLocale].default, params));\n            }\n\n            if (validator.halt === true) {\n              break;\n            }\n          }\n        }\n        if (!valid) {\n          break;\n        }\n      }\n      field.errors = errors;\n      return valid;\n    }\n\n    /**\n    * Add a validator to a specific dom element in a form\n    * @param {HTMLElement} elem => The dom element where the validator is applied to\n    * @param {Validator['fn']} fn => validator function\n    * @param {Validator['msg']} [msg] => message to show when validation fails. Supports templating. ${0} for the input's value, ${1} and so on are for the attribute values\n    * @param {number} [priority] => priority of the validator function, higher valued function gets called first\n    * @param {boolean} [halt] => whether validation should stop for this field after current validation function\n    */\n    self.addValidator = function(elem, fn, msg, priority, halt) {\n      if (elem instanceof HTMLElement) {\n        elem.pristine.validators.push({ fn, msg, priority, halt });\n        elem.pristine.validators.sort((a, b) => b.priority - a.priority);\n      } else {\n        console.warn('The parameter elem must be a dom element');\n      }\n    };\n\n\n    /**\n     * An utility function that returns a 2-element array, first one is the element where error/success class is\n     * applied. 2nd one is the element where error message is displayed. 2nd element is created if doesn't exist and cached.\n     * @param {Field} field\n     * @returns {Field}\n     * @private\n     */\n    function _getErrorElements(field) {\n      if (field.errorElements) {\n        return field.errorElements;\n      }\n      let errorClassElement = findAncestor(field.input, self.config.classTo);\n      let errorTextParent = null, errorTextElement = null;\n      if (self.config.classTo === self.config.errorTextParent) {\n        errorTextParent = errorClassElement;\n      } else {\n        errorTextParent = errorClassElement.querySelector('.' + self.config.errorTextParent);\n      }\n      if (errorTextParent) {\n        errorTextElement = errorTextParent.querySelector('.' + PRISTINE_ERROR);\n        if (!errorTextElement) {\n          errorTextElement = document.createElement(self.config.errorTextTag);\n          errorTextElement.className = PRISTINE_ERROR + ' ' + self.config.errorTextClass;\n          errorTextParent.appendChild(errorTextElement);\n          errorTextElement.pristineDisplay = errorTextElement.style.display;\n        }\n      }\n      return field.errorElements = [errorClassElement, errorTextElement];\n    }\n\n    /**\n     * @param {Field} field\n     * @returns {void}\n     * @private\n     */\n    function _showError(field) {\n      let errorElements = _getErrorElements(field);\n      let errorClassElement = errorElements[0], errorTextElement = errorElements[1];\n\n      const { input } = field;\n      const inputId = input.id || Math.floor(new Date().valueOf() * Math.random());\n      const errorId = `error-${inputId}`;\n\n      if (errorClassElement) {\n        //errorClassElement.classList.remove(self.config.successClass);\n        //errorClassElement.classList.add(self.config.errorClass);\n        let errCls = createClassArray(self.config.errorClass);\n        let sucCls = createClassArray(self.config.successClass);\n        if (sucCls.length) { sucCls.forEach((s) => errorClassElement.classList.remove(s)); };\n        if (errCls.length) { errCls.forEach((e) => errorClassElement.classList.add(e)); };\n        input.setAttribute('aria-describedby', errorId);\n        input.setAttribute('aria-invalid', 'true');\n      }\n      if (errorTextElement) {\n        errorTextElement.setAttribute('id', errorId);\n        errorTextElement.setAttribute('role', 'alert');\n        errorTextElement.innerHTML = field.errors.join('<br/>');\n        errorTextElement.style.display = errorTextElement.pristineDisplay || '';\n      }\n    }\n\n    /**\n     * Adds error to a specific field\n     * @param input\n     * @param error\n     */\n    self.addError = function(input, error) {\n      input = input.length ? input[0] : input;\n      input.pristine.errors.push(error);\n      _showError(input.pristine);\n    };\n\n    function _removeError(field) {\n      let errorElements = _getErrorElements(field);\n      let errorClassElement = errorElements[0], errorTextElement = errorElements[1];\n      const { input } = field;\n\n      if (errorClassElement) {\n        // IE > 9 doesn't support multiple class removal\n        // errorClassElement.classList.remove(self.config.errorClass);\n        // errorClassElement.classList.remove(self.config.successClass);\n        let errCls = createClassArray(self.config.errorClass);\n        let sucCls = createClassArray(self.config.successClass);\n        if (errCls.length) { errCls.forEach((e) => errorClassElement.classList.remove(e)); };\n        if (sucCls.length) { sucCls.forEach((s) => errorClassElement.classList.remove(s)); };\n        input.removeAttribute('aria-describedby');\n        input.removeAttribute('aria-invalid');\n      }\n      if (errorTextElement) {\n        errorTextElement.removeAttribute('id');\n        errorTextElement.removeAttribute('role');\n        errorTextElement.innerHTML = '';\n        errorTextElement.style.display = 'none';\n      }\n      return errorElements;\n    }\n\n    function _showSuccess(field) {\n      let errorClassElement = _removeError(field)[0];\n      //errorClassElement && errorClassElement.classList.add(self.config.successClass);\n      let sucCls = createClassArray(self.config.successClass);\n      if (sucCls.length) { errorClassElement && sucCls.forEach((s) => errorClassElement.classList.add(s)); };\n    }\n\n    /**\n     * @param {HTMLInputElement|HTMLTextAreaElement|HTMLSelectElement|HTMLFormElement} input\n     * @param {string} event \n     * @param {EventListenerOrEventListenerObject} handler \n     * @returns {void}\n     * @private\n     */\n    function _addEventListener(input, event, handler) {\n      input.addEventListener(event, handler)\n      if (!input.__pristineListeners) input.__pristineListeners = []\n      input.__pristineListeners.push({ event, handler })\n    }\n\n    /**\n     * @param {HTMLInputElement|HTMLTextAreaElement|HTMLSelectElement|HTMLFormElement} input\n     * @returns {void}\n     * @private\n     */\n    function _removeEventListener(input) {\n      if (!input.__pristineListeners) return\n      for (const { event, handler } of input.__pristineListeners) {\n        input.removeEventListener(event, handler)\n      }\n      input.__pristineListeners = []\n    }\n\n    /**\n     * Resets the errors\n     * @private\n     */\n    async function _reset() {\n      for (let i = 0; self.fields[i]; i++) {\n        self.fields[i].errorElements = null;\n        self.fields[i].touched = false;\n      }\n\n      if (self.config.disableSubmitUntilValid) {\n        await disableSubmit.bind(self)\n      }\n\n      Array.from(self.form.querySelectorAll('.' + PRISTINE_ERROR)).map(function(elem) {\n        elem.parentNode.removeChild(elem);\n      });\n      Array.from(self.form.querySelectorAll('.' + self.config.classTo)).map(function(elem) {\n        // elem.classList.remove(self.config.successClass);\n        // elem.classList.remove(self.config.errorClass);\n        let errCls = createClassArray(self.config.errorClass);\n        let sucCls = createClassArray(self.config.successClass);\n        if (errCls.length) { sucCls.forEach((s) => elem.classList.remove(s)); };\n        if (errCls.length) { errCls.forEach((e) => elem.classList.remove(e)); };\n      });\n    };\n\n    self.reset = _reset.bind(self)\n\n    /***\n    * Convert the multiple classes into an array and remove spaces\n    * if the class string is empty array\n    */\n    function createClassArray(classString) {\n      let cls = classString.split(' ').filter(e => e);\n      if (cls.length) return cls;\n      return ([]);\n    }\n\n    /***\n     * Resets the errors and deletes all pristine fields\n     */\n    self.destroy = async function() {\n      if (self.destroyed) return;\n\n      self.destroyed = true;\n\n      if (self.debounceTimeout) {\n        clearTimeout(self.debounceTimeout)\n        self.debounceTimeout = null\n      }\n\n      await self.reset();\n      self.fields.forEach(\n        /** @param {Field} field */\n        function(field) {\n          _removeEventListener(field.input)\n          delete field.input.pristine;\n        });\n      self.fields = [];\n      _removeEventListener(self.form)\n    };\n\n    self.setGlobalConfig = function(config) {\n      defaultConfig = config;\n    };\n\n    return self;\n  }\n\n  /**\n   * Adds a global validator\n   * @param {string} name => Name of the global validator\n   * @param {Validator['fn']} fn => validator function\n   * @param {Validator['msg']} [msg] => message to show when validation fails. Supports templating. ${0} for the input's value, ${1} and so on are for the attribute values\n   * @param {number} [priority] => priority of the validator function, higher valued function gets called first\n   * @param {boolean} [halt] => whether validation should stop for this field after current validation function\n   */\n  static addValidator(name, fn, msg, priority, halt) {\n    _(name, { fn, msg, priority, halt });\n  }\n\n  /**\n   * Adds a global message for a specific locale\n   * @param {string} [locale]\n   * @param {string} [message] \n   */\n  static addMessages(locale, messages) {\n    let langObj = lang.hasOwnProperty(locale) ? lang[locale] : lang[locale] = {};\n\n    Object.keys(messages).forEach(function(key, _) {\n      langObj[key] = messages[key];\n    });\n  }\n\n  /**\n   * Set the local\n   * @param {string} [locale]\n   */\n  static setLocale(locale) {\n    currentLocale = locale;\n  }\n}\n\n", "export const lang = {\n  en: {\n    required: \"This field is required\",\n    email: \"This field requires a valid email address\",\n    number: \"This field requires a number\",\n    integer: \"This field requires an integer value\",\n    url: \"This field requires a valid website URL\",\n    tel: \"This field requires a valid telephone number\",\n    maxlength: \"This fields length must be < ${1}\",\n    minlength: \"This fields length must be > ${1}\",\n    min: \"Minimum value for this field is ${1}\",\n    max: \"Maximum value for this field is ${1}\",\n    filesize: \"Maximum file size is ${1}\",\n    filesizetotal: \"Maximum total file size ${1}\",\n    filetype: \"Allowed file types: ${1.split(',').join(' ')}\",\n    pattern: \"Please match the requested format\",\n    equals: \"The two fields do not match\",\n    default: \"Please enter a correct value\"\n  }\n};\n", "/** @typedef {import(\"pristinejs\").PristineConfig} PristineConfig */\n/** @typedef {import(\"pristinejs\").Validator} Validator */\n/** @typedef {import(\"pristinejs\").Field} Field */\n\n\n/**\n * @param {HTMLElement} el \n * @param {string} cls\n * @returns {HTMLElement}\n */\nexport function findAncestor(el, cls) {\n  while ((el = el.parentElement) && !el.classList.contains(cls));\n  return el;\n}\n\n/**\n * @param {*} o \n * @returns {Regexp}\n */\nexport function tmpl(o) {\n  return this.replace(/\\${([^{}]*)}/g, (a, b) => arguments[b]);\n}\n\n/**\n * @param {HTMLInputElement|HTMLTextAreaElement|HTMLSelectElement} value \n * @returns {number}\n */\nexport function groupedElemCount(input) {\n  return input.pristine.self.form.querySelectorAll('input[name=\"' + input.getAttribute('name') + '\"]:checked').length;\n}\n\n/**\n * @param {PristineConfig} obj1 \n * @param {PristineConfig} obj2 \n * @returns {PristineConfig}\n */\nexport function mergeConfig(obj1, obj2) {\n  for (let attr in obj2) {\n    if (!(attr in obj1)) {\n      obj1[attr] = obj2[attr];\n    }\n  }\n  return obj1;\n}\n\n/**\n * @param {*} value \n * @returns {boolean}\n */\nexport function parseBool(value) {\n  if (typeof value === 'boolean') return value;\n  if (typeof value === 'string') {\n    const val = value.trim().toLowerCase();\n    return val === 'true' || val === '1' || val === 'yes' || val === 'on';\n  }\n  return !!value;\n}\n"],
  "mappings": "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",
  "names": ["pristine_exports", "__export", "Pristine", "lang", "findAncestor", "el", "cls", "tmpl", "o", "b", "groupedElemCount", "input", "mergeConfig", "obj1", "obj2", "attr", "defaultConfig", "PRISTINE_ERROR", "SELECTOR", "ALLOWED_ATTRIBUTES", "EMAIL_REGEX", "MESSAGE_REGEX", "currentLocale", "validators", "_", "name", "validator", "val", "groupedElemCount", "length", "limit", "pattern", "m", "otherFieldSelector", "other", "size", "file", "sum", "types", "allowed", "Pristine", "form", "config", "self", "init", "mergeConfig", "input", "fns", "params", "messages", "overlappingAttributes", "touched", "attr", "messageMatch", "locale", "validatorName", "_addValidatorToField", "a", "b", "_addEventListener", "e", "isChanged", "isEmpty", "isRequired", "pristine", "debouncedUpdate", "disableSubmit", "_reset", "invalid", "changed", "field", "value", "valueParams", "silent", "fields", "el", "valid", "i", "_validateField", "_showSuccess", "_showError", "erroneousFields", "errors", "values", "opt", "j", "tmpl", "lang", "elem", "fn", "msg", "priority", "halt", "_getErrorElements", "errorClassElement", "findAncestor", "errorTextParent", "errorTextElement", "errorElements", "errorId", "errCls", "createClassArray", "sucCls", "s", "error", "_removeError", "event", "handler", "_removeEventListener", "classString", "cls", "langObj", "key"]
}
