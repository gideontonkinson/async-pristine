{
  "version": 3,
  "sources": ["../src/pristine.js", "../src/lang.js", "../src/utils.js"],
  "sourcesContent": ["import { lang } from './lang';\nimport { tmpl, findAncestor, groupedElemCount, mergeConfig, parseBool } from './utils';\n\n/** @typedef {import(\"async-pristinejs\").PristineConfig} PristineConfig */\n/** @typedef {import(\"async-pristinejs\").Validator} Validator */\n/** @typedef {import(\"async-pristinejs\").Field} Field */\n\n/** @type {PristineConfig}*/\nlet defaultConfig = {\n  classTo: 'form-group',\n  errorClass: 'has-danger',\n  successClass: 'has-success',\n  errorTextParent: 'form-group',\n  errorTextTag: 'div',\n  errorTextClass: 'text-help',\n  disableSubmitUntilValid: true,\n  validateDefaultValues: true,\n  validationStrategy: 'off'\n};\n\nconst PRISTINE_ERROR = 'pristine-error';\nconst SELECTOR = 'input:not([type^=hidden]):not([type^=submit]), select, textarea';\nconst ALLOWED_ATTRIBUTES = new Set(['required', 'min', 'max', 'minlength', 'maxlength', 'pattern']);\nconst EMAIL_REGEX = /^(([^<>()\\[\\]\\\\.,;:\\s@']+(\\.[^<>()\\[\\]\\\\.,;:\\s@']+)*)|('.+'))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n\nconst MESSAGE_REGEX = /-message(?:-([a-z]{2}(?:_[A-Z]{2})?))?/; // matches, -message, -message-en, -message-en_US\nlet currentLocale = 'en';\nconst validators = {};\n\nconst _ = function(name, validator) {\n  validator.name = name;\n  if (validator.priority === undefined)\n    validator.priority = 1;\n  validators[name] = validator;\n};\n\n/** @type {Validator} */\n_('text', { fn: () => true, priority: 0 });\n/** @type {Validator]} */\n_('required', {\n  fn: function(val) {\n    if (this.type === 'radio' || this.type === 'checkbox') {\n      return groupedElemCount(this);\n    }\n\n    if (this.type === 'file') {\n      return this.files && this.files.length > 0;\n    }\n\n    return val !== undefined && val.trim() !== '';\n  },\n  priority: 99,\n  halt: true\n});\n\n/** @type {Validator} */\n_('email', { fn: (val) => !val || EMAIL_REGEX.test(val) });\n/** @type {Validator} */\n_('number', { fn: (val) => !val || !isNaN(parseFloat(val)), priority: 2 });\n/** @type {Validator} */\n_('integer', { fn: (val) => !val || /^\\d+$/.test(val) });\n/** @type {Validator} */\n_('minlength', { fn: (val, length) => !val || val.length >= parseInt(length) });\n/** @type {Validator} */\n_('maxlength', { fn: (val, length) => !val || val.length <= parseInt(length) });\n/** @type {Validator} */\n_('min', { fn: function(val, limit) { return !val || (this.type === 'checkbox' ? groupedElemCount(this) >= parseInt(limit) : parseFloat(val) >= parseFloat(limit)); } });\n/** @type {Validator} */\n_('max', { fn: function(val, limit) { return !val || (this.type === 'checkbox' ? groupedElemCount(this) <= parseInt(limit) : parseFloat(val) <= parseFloat(limit)); } });\n/** @type {Validator} */\n_('pattern', { fn: (val, pattern) => { let m = pattern.match(new RegExp('^/(.*?)/([gimy]*)$')); return !val || (new RegExp(m[1], m[2])).test(val); } });\n/** @type {Validator} */\n_('equals', { fn: (val, otherFieldSelector) => { let other = document.querySelector(otherFieldSelector); return (other) && ((!val && !other.value) || (other.value === val)); } });\n/** @type {Validator} */\n_('filesize', {\n  fn: function(_, size) {\n    if (!this.files || this.files.length === 0) return true; // not required\n    return Array.from(this.files).every(file =>\n      file.size <= parseInt(size)\n    );\n  }\n});\n/** @type {Validator} */\n_('filesizetotal', {\n  fn: function(_, size) {\n    if (!this.files || this.files.length === 0) return true; // not required\n    return Array.from(this.files).reduce((sum, file) => sum + file.size, 0) <= parseInt(size);\n  }\n});\n/** @type {Validator} */\n_('filetype', {\n  fn: function(_, types) {\n    if (!this.files || this.files.length === 0) return true; // not required\n    const allowed = types.split(',').map(t => t.trim().toLowerCase());\n    return Array.from(this.files).every(file =>\n      allowed.includes(file.type.toLowerCase())\n    );\n  }\n});\n\n/**\n * @class Pristine\n */\nexport default class Pristine {\n  /**\n   * @param {HTMLFormElement} form\n   * @param {PristineConfig} [config]\n   */\n  constructor(form, config) {\n    let self = this;\n\n    init(form, config);\n\n    /**\n     * @param {HTMLFormElement} form\n     * @param {PristineConfig} [config]\n     */\n    async function init(form, config) {\n      form.setAttribute('novalidate', 'true');\n\n      /** @type {boolean} */\n      self.destroyed = false\n\n      /** @type {HTMLFormElement} */\n      self.form = form;\n\n      /** @type {PristineConfig} */\n      self.config = mergeConfig(config || {}, defaultConfig);\n\n      /** @type {Field[]} */\n      self.fields = Array.from(form.querySelectorAll(SELECTOR)).map(\n        /** @param {HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement} input */\n        function(input) {\n          /** @type {Field['validators']} */\n          const fns = [];\n          /** @type {Field['params']} */\n          const params = {};\n          /** @type {Field['messages']} */\n          const messages = {};\n          /** @type {Set<string>} */\n          const overlappingAttributes = new Set();\n          /** @type {boolean} */\n          let touched = false;\n\n          // Check for overlapping attributes and prefer the pristine\n          [].forEach.call(input.attributes, function(attr) {\n            if (/^data-pristine-/.test(attr.name)) {\n              let name = attr.name.substr(14);\n              if (ALLOWED_ATTRIBUTES.has(name)) {\n                overlappingAttributes.add(name);\n              } else if (name === 'type') {\n                overlappingAttributes.add(attr.value);\n              }\n            }\n          });\n\n\n          [].forEach.call(input.attributes, function(attr) {\n            if (/^data-pristine-/.test(attr.name)) {\n              let name = attr.name.substr(14);\n              let messageMatch = name.match(MESSAGE_REGEX);\n              if (messageMatch !== null) {\n                let locale = messageMatch[1] === undefined ? 'en' : messageMatch[1];\n                if (!messages.hasOwnProperty(locale))\n                  messages[locale] = {};\n                let validatorName = name.replace(MESSAGE_REGEX, '');\n                messages[locale][validatorName] = attr.value;\n                return;\n              }\n              if (name === 'type') name = attr.value;\n              _addValidatorToField(fns, params, name, attr.value);\n            } else if (ALLOWED_ATTRIBUTES.has(attr.name) && !overlappingAttributes.has(attr.name)) {\n              _addValidatorToField(fns, params, attr.name, attr.value);\n            } else if (attr.name === 'type' && !overlappingAttributes.has(attr.value)) {\n              _addValidatorToField(fns, params, attr.value);\n            }\n          });\n\n\n          fns.sort((a, b) => b.priority - a.priority);\n\n          if (self.config.validationStrategy === 'live') {\n            _addEventListener(input, (!~['radio', 'checkbox', 'select'].indexOf(input.getAttribute('type')) ? 'input' : 'change'), async function(e) {\n              await self.validate(e.target);\n            }.bind(self));\n          } else if (self.config.validationStrategy === 'blur') {\n            _addEventListener(input, (!~['radio', 'checkbox', 'select'].indexOf(input.getAttribute('type')) ? 'blur' : 'change'), async function(e) {\n              await self.validate(e.target);\n            }.bind(self));\n          } else if (self.config.validationStrategy === 'hybrid') {\n            _addEventListener(input, (!~['radio', 'checkbox', 'select'].indexOf(input.getAttribute('type')) ? 'blur' : 'change'), async function(e) {\n              touched = true;\n              await self.validate(e.target);\n            }.bind(self), { once: true });\n            _addEventListener(input, (!~['radio', 'checkbox', 'select'].indexOf(input.getAttribute('type')) ? 'input' : 'change'), async function(e) {\n              if (touched) {\n                await self.validate(e.target);\n              }\n            }.bind(self));\n          }\n\n          // Check if the value is different than the default value\n          if (self.config.validateDefaultValues) {\n            queueMicrotask(async function() {\n              const isChanged = (\n                (input.type === 'checkbox' || input.type === 'radio')\n                  ? input.checked !== input.defaultChecked\n                  : input.value !== input.defaultValue\n              );\n\n              const isEmpty = input.value.trim() === '';\n              const isRequired = input.hasAttribute('required') || input.hasAttribute('data-pristine-required') !== null;\n\n              // Only show errors if value changed from default or required + not empty\n              if (isChanged || (isRequired && !isEmpty)) {\n                touched = true\n                await self.validate(input);\n              }\n            });\n          }\n\n          /** @type {Validator} */\n          const pristine = { input, validators: fns, params, messages, touched, self };\n          return input.pristine = pristine;\n        }.bind(self));\n\n      self.submit = self.form.querySelector('button[type=submit], input[type=submit]');\n      if (self.config.disableSubmitUntilValid) {\n        self.debounceTimeout = null\n        function debouncedUpdate() {\n          clearTimeout(self.debounceTimeout)\n          self.debounceTimeout = setTimeout(disableSubmit.bind(self), 50)\n        }\n\n        _addEventListener(self.form, 'input', debouncedUpdate.bind(self));\n        _addEventListener(self.form, 'change', debouncedUpdate.bind(self));\n        queueMicrotask(disableSubmit);\n      }\n      _addEventListener(self.form, 'reset', _reset.bind(self));\n    }\n\n    async function disableSubmit() {\n      if (!self.submit) return;\n\n      const invalid = !(await self.validate(true));\n\n      let changed = false;\n      if (self.config.validateDefaultValues) {\n        for (let field of self.fields) {\n          const input = field.input;\n\n          changed =\n            (input.type === 'checkbox' || input.type === 'radio')\n              ? input.checked !== input.checked\n              : input.value !== input.defaultValue;\n\n          if (changed) {\n            break;\n          }\n        }\n      }\n\n      self.submit.disabled = invalid || (self.config.validateDefaultValues && !changed);\n    };\n\n    /**\n     * @param {Validator[]} fns\n     * @param {Record<string, any[]>} params\n     * @param {string} name\n     * @param {any} value\n     */\n    function _addValidatorToField(fns, params, name, value) {\n      let validator = validators[name];\n      if (validator) {\n        fns.push(validator);\n        if (value) {\n          let valueParams = (name === 'pattern' ? [value] : value.split(','));\n          valueParams.unshift(null); // placeholder for input's value\n          params[name] = valueParams;\n        }\n      }\n    }\n\n    /**\n     * Validate a single input or the entire form.\n     * @param {HTMLElement | boolean | null} [input] => input element(s) or a jquery selector, null for full form validation\n     * @param {boolean} [silent] => do not show error messages, just return true/false\n     * @returns {Promise<boolean>} return true when valid false otherwise\n     */\n    self.validate = async function(input, silent) {\n      silent = (input && silent === true) || input === true;\n      let fields = self.fields;\n      if (input !== true && input !== false) {\n        if (input instanceof HTMLElement) {\n          fields = [input.pristine];\n        } else if (input instanceof NodeList || input instanceof (window.$ || Array) || input instanceof Array) {\n          fields = Array.from(input).map(el => el.pristine);\n        }\n      }\n\n      let valid = true;\n\n      for (let i = 0; fields[i]; i++) {\n        let field = fields[i];\n        if (await _validateField(field)) {\n          !silent && _showSuccess(field);\n        } else {\n          valid = false;\n          !silent && _showError(field);\n        }\n      }\n      return valid;\n    };\n\n    /**\n     * Get validation errors\n     * @param {HTMLElement} [input]\n     * @returns {Array<string> | Array<{ input: HTMLElement, errors: string[] }>}\n     */\n    self.getErrors = function(input) {\n      if (!input) {\n        let erroneousFields = [];\n        for (let i = 0; i < self.fields.length; i++) {\n          let field = self.fields[i];\n          if (field.errors.length) {\n            erroneousFields.push({ input: field.input, errors: field.errors });\n          }\n        }\n        return erroneousFields;\n      }\n      if (input.tagName && input.tagName.toLowerCase() === 'select') {\n        return input.pristine.errors;\n      }\n      return input.length ? input[0].pristine.errors : input.pristine.errors;\n    };\n\n    /**\n     * Validates a single field, all validator functions are called and error messages are generated\n     * when a validator fails\n     * @param  {Field} field\n     * @returns {Promise<boolean>}\n     * @private\n     */\n    async function _validateField(field) {\n      let errors = [];\n      let valid = true;\n      let values = [];\n      if (field.input.hasAttribute('multiple')) {\n        if (field.input.type = 'select') {\n          values.push(Array.from(selectElem.selectedOptions).map(opt => opt.value));\n        } else {\n          values.push(field.input.split(\",\"))\n        }\n      } else {\n        values.push(field.input.value)\n      }\n      for (let i = 0; i < values.length; i++) {\n        let value = values[i]\n        for (let j = 0; field.validators[j]; j++) {\n          let validator = field.validators[j];\n\n          let params = field.params[validator.name] ? field.params[validator.name] : [];\n          params[0] = value;\n          const isAsync = validator.fn.constructor.name === 'AsyncFunction';\n          if (isAsync ? !(await validator.fn.apply(field.input, params)) : !validator.fn.apply(field.input, params)) {\n            valid = false;\n\n            if (typeof validator.msg === 'function') {\n              errors.push(validator.msg(value, params));\n            } else if (typeof validator.msg === 'string') {\n              errors.push(tmpl.apply(validator.msg, params));\n            } else if (validator.msg === Object(validator.msg) && validator.msg[currentLocale]) { // typeof generates unnecessary babel code\n              errors.push(tmpl.apply(validator.msg[currentLocale], params));\n            } else if (field.messages[currentLocale] && field.messages[currentLocale][validator.name]) {\n              errors.push(tmpl.apply(field.messages[currentLocale][validator.name], params));\n            } else if (lang[currentLocale] && lang[currentLocale][validator.name]) {\n              errors.push(tmpl.apply(lang[currentLocale][validator.name], params));\n            } else {\n              errors.push(tmpl.apply(lang[currentLocale].default, params));\n            }\n\n            if (validator.halt === true) {\n              break;\n            }\n          }\n        }\n        if (!valid) {\n          break;\n        }\n      }\n      field.errors = errors;\n      return valid;\n    }\n\n    /**\n    * Add a validator to a specific dom element in a form\n    * @param {HTMLElement} elem => The dom element where the validator is applied to\n    * @param {Validator['fn']} fn => validator function\n    * @param {Validator['msg']} [msg] => message to show when validation fails. Supports templating. ${0} for the input's value, ${1} and so on are for the attribute values\n    * @param {number} [priority] => priority of the validator function, higher valued function gets called first\n    * @param {boolean} [halt] => whether validation should stop for this field after current validation function\n    */\n    self.addValidator = function(elem, fn, msg, priority, halt) {\n      if (elem instanceof HTMLElement) {\n        elem.pristine.validators.push({ fn, msg, priority, halt });\n        elem.pristine.validators.sort((a, b) => b.priority - a.priority);\n      } else {\n        console.warn('The parameter elem must be a dom element');\n      }\n    };\n\n\n    /**\n     * An utility function that returns a 2-element array, first one is the element where error/success class is\n     * applied. 2nd one is the element where error message is displayed. 2nd element is created if doesn't exist and cached.\n     * @param {Field} field\n     * @returns {Field}\n     * @private\n     */\n    function _getErrorElements(field) {\n      if (field.errorElements) {\n        return field.errorElements;\n      }\n      let errorClassElement = findAncestor(field.input, self.config.classTo);\n      let errorTextParent = null, errorTextElement = null;\n      if (self.config.classTo === self.config.errorTextParent) {\n        errorTextParent = errorClassElement;\n      } else {\n        errorTextParent = errorClassElement.querySelector('.' + self.config.errorTextParent);\n      }\n      if (errorTextParent) {\n        errorTextElement = errorTextParent.querySelector('.' + PRISTINE_ERROR);\n        if (!errorTextElement) {\n          errorTextElement = document.createElement(self.config.errorTextTag);\n          errorTextElement.className = PRISTINE_ERROR + ' ' + self.config.errorTextClass;\n          errorTextParent.appendChild(errorTextElement);\n          errorTextElement.pristineDisplay = errorTextElement.style.display;\n        }\n      }\n      return field.errorElements = [errorClassElement, errorTextElement];\n    }\n\n    /**\n     * @param {Field} field\n     * @returns {void}\n     * @private\n     */\n    function _showError(field) {\n      let errorElements = _getErrorElements(field);\n      let errorClassElement = errorElements[0], errorTextElement = errorElements[1];\n\n      const { input } = field;\n      const inputId = input.id || Math.floor(new Date().valueOf() * Math.random());\n      const errorId = `error-${inputId}`;\n\n      if (errorClassElement) {\n        //errorClassElement.classList.remove(self.config.successClass);\n        //errorClassElement.classList.add(self.config.errorClass);\n        let errCls = createClassArray(self.config.errorClass);\n        let sucCls = createClassArray(self.config.successClass);\n        if (sucCls.length) { sucCls.forEach((s) => errorClassElement.classList.remove(s)); };\n        if (errCls.length) { errCls.forEach((e) => errorClassElement.classList.add(e)); };\n        input.setAttribute('aria-describedby', errorId);\n        input.setAttribute('aria-invalid', 'true');\n      }\n      if (errorTextElement) {\n        errorTextElement.setAttribute('id', errorId);\n        errorTextElement.setAttribute('role', 'alert');\n        errorTextElement.innerHTML = field.errors.join('<br/>');\n        errorTextElement.style.display = errorTextElement.pristineDisplay || '';\n      }\n    }\n\n    /**\n     * Adds error to a specific field\n     * @param input\n     * @param error\n     */\n    self.addError = function(input, error) {\n      input = input.length ? input[0] : input;\n      input.pristine.errors.push(error);\n      _showError(input.pristine);\n    };\n\n    function _removeError(field) {\n      let errorElements = _getErrorElements(field);\n      let errorClassElement = errorElements[0], errorTextElement = errorElements[1];\n      const { input } = field;\n\n      if (errorClassElement) {\n        // IE > 9 doesn't support multiple class removal\n        // errorClassElement.classList.remove(self.config.errorClass);\n        // errorClassElement.classList.remove(self.config.successClass);\n        let errCls = createClassArray(self.config.errorClass);\n        let sucCls = createClassArray(self.config.successClass);\n        if (errCls.length) { errCls.forEach((e) => errorClassElement.classList.remove(e)); };\n        if (sucCls.length) { sucCls.forEach((s) => errorClassElement.classList.remove(s)); };\n        input.removeAttribute('aria-describedby');\n        input.removeAttribute('aria-invalid');\n      }\n      if (errorTextElement) {\n        errorTextElement.removeAttribute('id');\n        errorTextElement.removeAttribute('role');\n        errorTextElement.innerHTML = '';\n        errorTextElement.style.display = 'none';\n      }\n      return errorElements;\n    }\n\n    function _showSuccess(field) {\n      let errorClassElement = _removeError(field)[0];\n      //errorClassElement && errorClassElement.classList.add(self.config.successClass);\n      let sucCls = createClassArray(self.config.successClass);\n      if (sucCls.length) { errorClassElement && sucCls.forEach((s) => errorClassElement.classList.add(s)); };\n    }\n\n    /**\n     * @param {HTMLInputElement|HTMLTextAreaElement|HTMLSelectElement|HTMLFormElement} input\n     * @param {string} event \n     * @param {EventListenerOrEventListenerObject} handler \n     * @returns {void}\n     * @private\n     */\n    function _addEventListener(input, event, handler) {\n      input.addEventListener(event, handler)\n      if (!input.__pristineListeners) input.__pristineListeners = []\n      input.__pristineListeners.push({ event, handler })\n    }\n\n    /**\n     * @param {HTMLInputElement|HTMLTextAreaElement|HTMLSelectElement|HTMLFormElement} input\n     * @returns {void}\n     * @private\n     */\n    function _removeEventListener(input) {\n      if (!input.__pristineListeners) return\n      for (const { event, handler } of input.__pristineListeners) {\n        input.removeEventListener(event, handler)\n      }\n      input.__pristineListeners = []\n    }\n\n    /**\n     * Resets the errors\n     * @private\n     */\n    async function _reset() {\n      for (let i = 0; self.fields[i]; i++) {\n        self.fields[i].errorElements = null;\n        self.fields[i].touched = false;\n      }\n\n      if (self.config.disableSubmitUntilValid) {\n        await disableSubmit.bind(self)\n      }\n\n      Array.from(self.form.querySelectorAll('.' + PRISTINE_ERROR)).map(function(elem) {\n        elem.parentNode.removeChild(elem);\n      });\n      Array.from(self.form.querySelectorAll('.' + self.config.classTo)).map(function(elem) {\n        // elem.classList.remove(self.config.successClass);\n        // elem.classList.remove(self.config.errorClass);\n        let errCls = createClassArray(self.config.errorClass);\n        let sucCls = createClassArray(self.config.successClass);\n        if (errCls.length) { sucCls.forEach((s) => elem.classList.remove(s)); };\n        if (errCls.length) { errCls.forEach((e) => elem.classList.remove(e)); };\n      });\n    };\n\n    self.reset = _reset.bind(self)\n\n    /***\n    * Convert the multiple classes into an array and remove spaces\n    * if the class string is empty array\n    */\n    function createClassArray(classString) {\n      let cls = classString.split(' ').filter(e => e);\n      if (cls.length) return cls;\n      return ([]);\n    }\n\n    /***\n     * Resets the errors and deletes all pristine fields\n     */\n    self.destroy = async function() {\n      if (self.destroyed) return;\n\n      self.destroyed = true;\n\n      if (self.debounceTimeout) {\n        clearTimeout(self.debounceTimeout)\n        self.debounceTimeout = null\n      }\n\n      await self.reset();\n      self.fields.forEach(\n        /** @param {Field} field */\n        function(field) {\n          _removeEventListener(field.input)\n          delete field.input.pristine;\n        });\n      self.fields = [];\n      _removeEventListener(self.form)\n    };\n\n    self.setGlobalConfig = function(config) {\n      defaultConfig = config;\n    };\n\n    return self;\n  }\n\n  /**\n   * Adds a global validator\n   * @param {string} name => Name of the global validator\n   * @param {Validator['fn']} fn => validator function\n   * @param {Validator['msg']} [msg] => message to show when validation fails. Supports templating. ${0} for the input's value, ${1} and so on are for the attribute values\n   * @param {number} [priority] => priority of the validator function, higher valued function gets called first\n   * @param {boolean} [halt] => whether validation should stop for this field after current validation function\n   */\n  static addValidator(name, fn, msg, priority, halt) {\n    _(name, { fn, msg, priority, halt });\n  }\n\n  /**\n   * Adds a global message for a specific locale\n   * @param {string} [locale]\n   * @param {string} [message] \n   */\n  static addMessages(locale, messages) {\n    let langObj = lang.hasOwnProperty(locale) ? lang[locale] : lang[locale] = {};\n\n    Object.keys(messages).forEach(function(key, _) {\n      langObj[key] = messages[key];\n    });\n  }\n\n  /**\n   * Set the local\n   * @param {string} [locale]\n   */\n  static setLocale(locale) {\n    currentLocale = locale;\n  }\n}\n\n", "export const lang = {\n  en: {\n    required: \"This field is required\",\n    email: \"This field requires a valid email address\",\n    number: \"This field requires a number\",\n    integer: \"This field requires an integer value\",\n    url: \"This field requires a valid website URL\",\n    tel: \"This field requires a valid telephone number\",\n    maxlength: \"This fields length must be < ${1}\",\n    minlength: \"This fields length must be > ${1}\",\n    min: \"Minimum value for this field is ${1}\",\n    max: \"Maximum value for this field is ${1}\",\n    filesize: \"Maximum file size is ${1}\",\n    filesizetotal: \"Maximum total file size ${1}\",\n    filetype: \"Allowed file types: ${1.split(',').join(' ')}\",\n    pattern: \"Please match the requested format\",\n    equals: \"The two fields do not match\",\n    default: \"Please enter a correct value\"\n  }\n};\n", "/** @typedef {import(\"pristinejs\").PristineConfig} PristineConfig */\n/** @typedef {import(\"pristinejs\").Validator} Validator */\n/** @typedef {import(\"pristinejs\").Field} Field */\n\n\n/**\n * @param {HTMLElement} el \n * @param {string} cls\n * @returns {HTMLElement}\n */\nexport function findAncestor(el, cls) {\n  while ((el = el.parentElement) && !el.classList.contains(cls));\n  return el;\n}\n\n/**\n * @param {*} o \n * @returns {Regexp}\n */\nexport function tmpl(o) {\n  return this.replace(/\\${([^{}]*)}/g, (a, b) => arguments[b]);\n}\n\n/**\n * @param {HTMLInputElement|HTMLTextAreaElement|HTMLSelectElement} value \n * @returns {number}\n */\nexport function groupedElemCount(input) {\n  return input.pristine.self.form.querySelectorAll('input[name=\"' + input.getAttribute('name') + '\"]:checked').length;\n}\n\n/**\n * @param {PristineConfig} obj1 \n * @param {PristineConfig} obj2 \n * @returns {PristineConfig}\n */\nexport function mergeConfig(obj1, obj2) {\n  for (let attr in obj2) {\n    if (!(attr in obj1)) {\n      obj1[attr] = obj2[attr];\n    }\n  }\n  return obj1;\n}\n\n/**\n * @param {*} value \n * @returns {boolean}\n */\nexport function parseBool(value) {\n  if (typeof value === 'boolean') return value;\n  if (typeof value === 'string') {\n    const val = value.trim().toLowerCase();\n    return val === 'true' || val === '1' || val === 'yes' || val === 'on';\n  }\n  return !!value;\n}\n"],
  "mappings": "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",
  "names": ["_", "form", "config"]
}
